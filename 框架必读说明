
----------------------------------------------------------------------------------------------

GameSDK_API层:

   SDK对外接口层：是暴露给CP的接口,底层返回的数据格式在这一层转化,该层不参与混淆。
                 所以不要在该层做业务逻辑处理，避免被反射调用修改。

   后续有新的接口，可以在该层做拓展对外给CP。

----------------------------------------------------------------------------------------------

GameSDK_BeginProject层:

   SDK项目层：是与Api层对接的项目入口层，可以通过修改配置文件 Project_config.txt
   进入和替换成不同的Project SDK项目。

   注意：

       顶层Project已经确定好后，不要修改太多，如果有拓展的功能接口，
       可以通过extendFunction()对应type拓展，避免改动太多底层代码。


    SDK大体分为两类：
    1、Project_JuHe为聚合SDK项目,主要业务用于封装三方渠道。

    2、Project_Custom为自定义SDK项目,主要是做自己的渠道,每个公司可能会有不同的名称,
       主要业务是,实现用户入口、支付逻辑、数据统计等功能。

       可能根据不同的游戏运营需求会有不同的登录逻辑、绑定逻辑、支付方式、数据上报等
       会细分为公版项目、海外项目(针对地区)、根据游戏的定制化项目等。可根据不同的项目,拓展Project


    该层是做业务逻辑处理的，希望能有清晰的架构思路。
	
----------------------------------------------------------------------------------------------

SYSDK_Channel: SDK项目渠道层

   该层负责对接渠道接入的业务，不同的渠道都会有对应的Module实现具体的代码调用和逻辑处理，以及资源配置
   通过配置文件 Channel_config.txt 管理。

   而且每个渠道Module都会有对应的开发者说明文件，方便后续的开发同事维护更新。详见开发者说明。

   开发者格式说明：

      格式： 渠道名 -- 版本号 -- 开发人员 （如果渠道没有版本就按V1.0.0来）    日期

                相关注意事项说明：
                1、.... xxx ....
                2、.... xxx ....


----------------------------------------------------------------------------------------------

SYSDK_Manager:

   SDK逻辑管理层：

      该层为整个SDK功能逻辑的实现：初始化、账号、支付、获取道具信息、补单逻辑、退出
      为避免逻辑层因业务太乱导致代码过多,及后续的功能模块抽离.
      采用模块化化思想进行模块管理.

      初始化：SDK初始化(全局参数缓存、环境切换、权限问题等) >- 项目初始化(默认初始化 和 项目初始化)

      登陆：设备登陆、游客登录、账号登陆、三方登陆(google/facebook/微信)

      支付：三方支付：google、支付宝、微信、及特有的项目支付、补单

      退出：

      当有额外的功能添加的时候，在该层实现即可。

----------------------------------------------------------------------------------------------

GameSDK_Manager_Impl:

   SDK逻辑功能拓展反射层，通过反射解耦插件：

        该层更多的是针对后续Plugin插件做不同的功能反射，具体调用Plugin层插件。
        只负责对接GameSDK_Manager_Impl 和 Plugin插件层。

----------------------------------------------------------------------------------------------

GameSDK_Plugin:

    SDK功能插件层，与渠道层有点类似，通过配置文件 Plugin_config.txt 管理。
    通过逻辑控制层 Manager_Logic_Impl 反射调用实现，把插件拔除不影响。
    可以是三方的功能插件，也可以是自己实现的插件。

    目前为说明功能，用支付宝和微信说明
    Alipay功能插件层：实现Alipay功能，封装Alipay相关接口
    Wechat功能插件层：实现Wechat功能，封装Wechat相关接口

   当有额外的功能添加的时候，在该层实现即可。
   
----------------------------------------------------------------------------------------------

GameSDK_Utils:

   GameSDK_Utils层：该层为整个SDK功能基础库：目前分为业务基础库 和 功能基础库，方便后续将业务分离。

      基础组件：

         1、数据缓存、域名配置、项目/插件/渠道管理
            注意：将项目、渠道、插件分别加载的目的：

            是为了快速替换项目Project的入口类

            一个项目Project 可以对应多个渠道、多个插件。后续可以在多渠道、多插件上
            进行快速的插拔和后台开关的切换渠道。

            不过正常的需求都是一个项目，对应零个或一个渠道、一个或多个功能插件


         2、网络请求、日志输出、Gson解析

            注意：网络请求，目前封装的volly (volly是比较轻量级的，主要是为减少SDK包体)
                 日志输出，目前封装的logger(logger比较轻量级，主要用于开发日志信息输出)

                 第三方库快速替换方案思路：(方便后续维护替换成更好的库)
                 接口解耦封装，实现上层业务网络请求接口不改动，只做封装层的api调用即可


   基础库不要轻易修改! 不要轻易修改! 不要轻易修改! 不要轻易修改! 不要轻易修改!

---------------------------------------------------------------------------------------

